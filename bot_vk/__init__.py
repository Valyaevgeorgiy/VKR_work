from flask import Flask, request, json
from faq import FAQ
import vk_api
import telebot
import traceback
import os
from telebot import types
from vk_api.utils import get_random_id
import json as JSON
import time

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π –≥—Ä—É–ø–ø—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
vk_session = vk_api.VkApi(token="—Ç–æ–∫–µ–Ω –≤–∫ –≥—Ä—É–ø–ø—ã")

app = Flask(__name__)


def send_message(peer_id, message, keyboard=None, attachment=None):
    args = {
        'peer_id': peer_id,
        'message': message,
        'random_id': get_random_id()
    }
    if keyboard is not None:
        args['keyboard'] = JSON.JSONEncoder().encode(keyboard)
    elif attachment is not None:
        args['attachment'] = attachment
    vk_session.method('messages.send', args)


main_kb_faq = {
    "one_time": False,
    "inline": False,
    "buttons": [
        [
            {
                "action": {
                    "type": "text",
                    "payload": {
                        "function": "update"
                    },
                    "label": "üí´ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"
                },
                "color": "primary"
            }
        ],
        [
            {
                "action": {
                    "type": "text",
                    "payload": {
                        "function": "help"
                    },
                    "label": "‚ùì –ü–æ–º–æ—â—å"
                },
                "color": "secondary"
            }
        ]
    ]
}

plug_kb = {
    "inline": True,
    "buttons": [
        [
            {
                "action": {
                    "type": "text",
                    "payload": {
                        "function": "plug_on"
                    },
                    "label": "–í–∫–ª—é—á–∏—Ç—å"
                },
                "color": "positive"
            },
            {
                "action": {
                    "type": "text",
                    "payload": {
                        "function": "plug_off"
                    },
                    "label": "–í—ã–∫–ª—é—á–∏—Ç—å"
                },
                "color": "negative"
            }
        ]
    ]
}

chat_kb = {
    "inline": True,
    "buttons": [
        [
            {
                "action": {
                    "type": "text",
                    "payload": {
                        "function": "chat_on"
                    },
                    "label": "–í–∫–ª—é—á–∏—Ç—å"
                },
                "color": "positive"
            }
        ],
        [
            {
                "action": {
                    "type": "text",
                    "payload": {
                        "function": "chat_off"
                    },
                    "label": "–í—ã–∫–ª—é—á–∏—Ç—å"
                },
                "color": "negative"
            }
        ]
    ]
}

# –∞–π–¥–∏ –±–µ—Å–µ–¥—ã —Ç–µ—Å—Ç–æ–≤–æ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º (id —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
id_testchat = "2000000001"
id_admin_chat = "368424892"

faq_table = FAQ(name="FAQ —Å–∏—Å—Ç–µ–º–∞",
                sheet_link="https://docs.google.com/spreadsheets/d/1iYKz7fNpviX2r15v7QNlcYbYan2MGYqonytu05RDh6c/edit#gid=0")

# –õ–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–ª–∞–≥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ö–∞–Ω–∏–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
is_problem = False

# –õ–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–ª–∞–≥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Ä–µ–∂–∏–º–∞ –∑–∞–≥–ª—É—à–∫–∏ —É –±–æ—Ç–∞
is_plug = False

# –õ–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–ª–∞–≥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç-–±–æ—Ç–∞ —É —Å–∏—Å—Ç–µ–º—ã
is_chat = False
chat_counter = 1


@app.route('/', methods=["POST"])  # —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –∑–∞–ø—Ä–æ—Å—ã
def main():
    global is_problem, is_plug, is_chat, chat_counter
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º json-–æ—Ç–≤–µ—Ç –≤ –ø–∏—Ç–æ–Ω–æ–≤—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
        data = json.loads(request.data)
        templates = faq_table.get_templates()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–Ω–æ–ø–æ–∫

        try:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–º–æ—â—å—é –ª–æ–≥–æ–≤
            with open(f'{os.path.dirname(__file__)}/log.json', 'r', encoding="utf-8") as read_file:
                log = json.load(read_file)
        except FileNotFoundError:
            log = []

        if data['event_id'] in log:  # –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–æ, —Ç–æ –≤—ã—Ö–æ–¥–∏–º
            return "ok"
        else:
            log.append(data['event_id'])
            with open(f'{os.path.dirname(__file__)}/log.json', 'w') as write_file:
                json.dump(log, write_file)

        if data["type"] == "confirmation":  # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            return "cfae6f7d"

        if data["type"] == "message_new":  # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ
            object_0 = data["object"]["message"]
            object_1 = data["object"]["client_info"]

            peer_id = object_0["peer_id"]
            body = object_0["text"]
            from_id = str(object_0["from_id"])
            attachments = object_0["attachments"]

            keyboard_work = object_1["keyboard"]

            if keyboard_work == 1:

                # —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ

                # —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∞—è id –±–µ—Å–µ–¥—ã (—á–∞—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
                if body.lower()[:5] == "!–∞–π–¥–∏":
                    send_message(peer_id, message=peer_id)
                    return "ok"

                elif body.lower()[:7] == "!–Ω–∞—á–∞—Ç—å":
                    template = templates['menu']
                    send_message(peer_id, **template)
                    return "ok"

                # —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                if str(peer_id) == id_testchat:
                    if body.lower()[:7] == "!–ø–æ–º–æ—â—å":
                        msg = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –î–∏–ø–ª–æ–º–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!\n\n–ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n\n1) !—Å—Ç–∞—Ä—Ç ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ –∏ –≥—Ä—É–ø–ø–µ –ø—Ä–æ–µ–∫—Ç–∞.\n\n2) !–∑–∞–≥–ª—É—à–∫–∞ ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –≤ –±–æ—Ç–∞ –∑–∞–≥–ª—É—à–∫—É –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –∏ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–µ–¥–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –Ω–∞–¥ –±–æ—Ç–æ–º –≥—Ä—É–ø–ø—ã!\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!!!"
                        send_message(peer_id, msg)

                    elif body.lower()[:6] == "!—Å—Ç–∞—Ä—Ç":
                        send_message(
                            peer_id, f"{faq_table.__str__()}\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", main_kb_faq)

                    # —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
                    elif body.lower()[:9] == "!–∑–∞–≥–ª—É—à–∫–∞":
                        send_message(
                            peer_id, "–§—É–Ω–∫—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –ß—Ç–æ —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Å –Ω–µ–π?", plug_kb)

                # —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–∫–µ
                else:

                    # –¢–∞–∫–∂–µ –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–µ–¥–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
                    if is_plug:
                        send_message(
                            peer_id, "–°–µ–π—á–∞—Å –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
                        return "ok"
                    else:

                        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∏–∫–µ—Ä, —Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –µ–≥–æ –∂–µ –≤ –æ—Ç–≤–µ—Ç (–ø—Ä–∏–Ω—Ü–∏–ø —ç—Ö–æ-—Å–µ—Ä–≤–µ—Ä–∞)
                        try:
                            if len(object_0["attachments"]) != 0:
                                if object_0["attachments"][0]["type"] == "sticker":
                                    args = {
                                        'peer_id': peer_id,
                                        'sticker_id': object_0["attachments"][0]["sticker"]["sticker_id"],
                                        'random_id': get_random_id()
                                    }
                                    vk_session.method('messages.send', args)
                                return 'ok'
                        except Exception as e:
                            pass

                        if is_problem:
                            # 2. –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π-–≤–æ–ø—Ä–æ—Å–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                            user_name = vk_session.method(
                                "users.get", {"user_ids": peer_id, "name_case": "Nom"})
                            notification = "@id" + from_id + " (" + user_name[0]['first_name'] + " " + user_name[0][
                                'last_name'] + ") –Ω–∞–ø–∏—Å–∞–ª(-–∞) –≤ –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n<<" + body + ">>\n\n–ß–µ–ª–æ–≤–µ–∫ –∂–¥—ë—Ç –æ—Ç–≤–µ—Ç–∞: vk.com/gim161181001?sel=" + from_id + "\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: vk.com/gim161181001"
                            send_message(id_testchat, message=notification)

                            # 3. –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ-–≤–æ–ø—Ä–æ—Å–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!
                            done_msg = '–û—Ç–ª–∏—á–Ω–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏–Ω—è–ª–∏, —Ç–µ–±–µ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç!'
                            send_message(peer_id, message=done_msg)

                            is_problem = False
                            time.sleep(1)

                            # 4. –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π
                            template = templates['menu']
                            send_message(peer_id, **template)

                        if is_chat:
                            # –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —á–∞—Ç-–±–æ—Ç–∞ —Å NLP (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ user says)

                            # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç..."
                            arguments = {
                                "peer_id": peer_id,
                                "type": "typing"
                            }
                            vk_session.method(
                                'messages.setActivity', arguments)

                            time.sleep(1)

                            search_user_says = faq_table.search_user_says(
                                body.lower())
                            faq_table.clean_template_scores()
                            faq_table.clean_napr_sphere_scores()

                            # —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —é–∑–µ—Ä —Å–µ–π—Å—ã –Ω–µ –¥–∞–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ‚Äî —Å–∏–≥–Ω–∞–ª –æ–± –æ—à–∏–±–∫–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ
                            # —Ç—É—Ç —Å —Ü–µ–ª—å—é –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –æ—Ç–≤–µ—Ç –≤—ã–¥–∞—ë—Ç—Å—è —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª
                            # –∏ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –Ω–µ –Ω–∞—à—ë–ª –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ –±–∞–∑–µ

                            if "payload" not in object_0.keys():
                                # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Ç—É–∞—Ü–∏–π —Å –Ω–µ—Ç–æ—á–Ω—ã–º–∏ –∏ —Ç–æ—á–Ω—ã–º–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ (—Ç–æ–ø-5)

                                # —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
                                labels_templates = faq_table.render_full_names_templates()

                                keyboard = {
                                    "inline": True,
                                    "buttons": []
                                }

                                if type(search_user_says[0]) == str:
                                    # –ª–æ–≤–∏–º –∫–µ–π—Å—ã —Å –≤—ã–≤–æ–¥–æ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–≤–æ–¥–∫–∏ –ø–æ –≤—Å–µ–º –†–ü–î
                                    # –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞

                                    msg_output = search_user_says[0]
                                    potential_templates = search_user_says[1][1:]

                                    if search_user_says[1][0] == 5:
                                        button = [
                                            [
                                                {
                                                    "action": {
                                                        "type": "text",
                                                        "payload": {
                                                            "template": potential_templates[0]
                                                        },
                                                        "label": labels_templates[potential_templates[0]]
                                                    },
                                                    "color": "primary"
                                                },
                                                {
                                                    "action": {
                                                        "type": "text",
                                                        "payload": {
                                                            "template": potential_templates[1]
                                                        },
                                                        "label": labels_templates[potential_templates[1]]
                                                    },
                                                    "color": "primary"
                                                }
                                            ],
                                            [
                                                {
                                                    "action": {
                                                        "type": "text",
                                                        "payload": {
                                                            "template": potential_templates[2]
                                                        },
                                                        "label": labels_templates[potential_templates[2]]
                                                    },
                                                    "color": "primary"
                                                },
                                                {
                                                    "action": {
                                                        "type": "text",
                                                        "payload": {
                                                            "template": potential_templates[3]
                                                        },
                                                        "label": labels_templates[potential_templates[3]]
                                                    },
                                                    "color": "primary"
                                                }
                                            ],
                                            [
                                                {
                                                    "action": {
                                                        "type": "text",
                                                        "payload": {
                                                            "template": potential_templates[4]
                                                        },
                                                        "label": labels_templates[potential_templates[4]]
                                                    },
                                                    "color": "primary"
                                                }
                                            ]
                                        ]

                                    elif search_user_says[1][0] == 3:
                                        button = [
                                            [
                                                {
                                                    "action": {
                                                        "type": "text",
                                                        "payload": {
                                                            "template": potential_templates[0]
                                                        },
                                                        "label": labels_templates[potential_templates[0]]
                                                    },
                                                    "color": "primary"
                                                },
                                                {
                                                    "action": {
                                                        "type": "text",
                                                        "payload": {
                                                            "template": potential_templates[1]
                                                        },
                                                        "label": labels_templates[potential_templates[1]]
                                                    },
                                                    "color": "primary"
                                                }
                                            ],
                                            [
                                                {
                                                    "action": {
                                                        "type": "text",
                                                        "payload": {
                                                            "template": potential_templates[2]
                                                        },
                                                        "label": labels_templates[potential_templates[2]]
                                                    },
                                                    "color": "primary"
                                                }
                                            ]
                                        ]

                                    button5 = str(button).replace("'", '"')
                                    button55 = json.loads(button5)
                                    keyboard["buttons"] = button55

                                    send_message(
                                        peer_id, message=msg_output, keyboard=keyboard)
                                    return "ok"

                                # –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –µ—Å—Ç—å —Å–ª—É—á–∞–µ–≤ –∏ –∫–µ–π—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —é—Å, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–ª –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º –Ω–∏–∂–µ

                                # —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö templates
                                potential_templates = search_user_says[1:]

                                # —Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ–¥ —é—Å –∏ template
                                if search_user_says[0] == 0:
                                    name_template = search_user_says[1]
                                    if name_template == "support_0":
                                        # —Ç—É—Ç –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

                                        # 1. –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ
                                        template = templates['support_0']
                                        send_message(peer_id, **template)
                                    else:
                                        template = templates[name_template]
                                        send_message(peer_id, **template)

                                # —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω–æ 2 —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                                elif search_user_says[0] == 2:
                                    button = [
                                        [
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[0]
                                                    },
                                                    "label": labels_templates[potential_templates[0]]
                                                },
                                                "color": "primary"
                                            }
                                        ],
                                        [
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[1]
                                                    },
                                                    "label": labels_templates[potential_templates[1]]
                                                },
                                                "color": "primary"
                                            }
                                        ]
                                    ]

                                    button2 = str(button).replace("'", '"')
                                    button22 = json.loads(button2)
                                    keyboard["buttons"] = button22

                                    message = "–ù–∞–≤–µ—Ä–Ω–æ–µ, —Ç—ã –∏–º–µ–ª(-–∞) –≤ –≤–∏–¥—É"
                                    send_message(
                                        peer_id, message=message, keyboard=keyboard)

                                # —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω–æ 3 —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                                elif search_user_says[0] == 3:
                                    button = [
                                        [
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[0]
                                                    },
                                                    "label": labels_templates[potential_templates[0]]
                                                },
                                                "color": "primary"
                                            },
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[1]
                                                    },
                                                    "label": labels_templates[potential_templates[1]]
                                                },
                                                "color": "primary"
                                            }
                                        ],
                                        [
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[2]
                                                    },
                                                    "label": labels_templates[potential_templates[2]]
                                                },
                                                "color": "primary"
                                            }
                                        ]
                                    ]

                                    button3 = str(button).replace("'", '"')
                                    button33 = json.loads(button3)
                                    keyboard["buttons"] = button33

                                    message = "–ù–∞–≤–µ—Ä–Ω–æ–µ, —Ç—ã –∏–º–µ–ª(-–∞) –≤ –≤–∏–¥—É"
                                    send_message(
                                        peer_id, message=message, keyboard=keyboard)

                                elif len(potential_templates) == 5:
                                    button = [
                                        [
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[0]
                                                    },
                                                    "label": labels_templates[potential_templates[0]]
                                                },
                                                "color": "primary"
                                            },
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[1]
                                                    },
                                                    "label": labels_templates[potential_templates[1]]
                                                },
                                                "color": "primary"
                                            }
                                        ],
                                        [
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[2]
                                                    },
                                                    "label": labels_templates[potential_templates[2]]
                                                },
                                                "color": "primary"
                                            },
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[3]
                                                    },
                                                    "label": labels_templates[potential_templates[3]]
                                                },
                                                "color": "primary"
                                            }
                                        ],
                                        [
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": potential_templates[4]
                                                    },
                                                    "label": labels_templates[potential_templates[4]]
                                                },
                                                "color": "primary"
                                            }
                                        ]
                                    ]

                                    button5 = str(button).replace("'", '"')
                                    button55 = json.loads(button5)
                                    keyboard["buttons"] = button55

                                    # —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–Ω–æ 5 –∏ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                                    if search_user_says[0] == 5:
                                        message = "–ù–∞–≤–µ—Ä–Ω–æ–µ, —Ç—ã –∏–º–µ–ª(-–∞) –≤ –≤–∏–¥—É"
                                        send_message(
                                            peer_id, message=message, keyboard=keyboard)

                                    # –≤—ã–≤–æ–¥ 5 –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö template –ø–æ–¥ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (0 —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
                                    elif search_user_says[0] == -1:
                                        message = "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –∏–º–µ–ª(-–∞) –≤ –≤–∏–¥—É"
                                        send_message(
                                            peer_id, message=message, keyboard=keyboard)

                            # —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç, –∞ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏
                            else:
                                # –∑–¥–µ—Å—å –º—ã –ª–æ–≤–∏–º —Å–∏—Ç—É–∞—Ü–∏—é –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ—ë –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π-–≤–æ–ø—Ä–æ—Å–æ–º
                                is_problem = False
                        else:

                            # —á–µ–∫–∞–µ–º, –∏–¥—ë—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç
                            if "payload" not in object_0.keys():
                                # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –≤–∫–∏–¥—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –±–æ—Ç—É, —Ç–æ
                                # –Ω–∞ –∫–∞–∂–¥–æ–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–µ –µ–º—É –±—É–¥–µ—Ç –ø—Ä–∏–ª–µ—Ç–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —á–∞—Ç-–±–æ—Ç–∞

                                kb_faq = {
                                    "inline": True,
                                    "buttons": [
                                        [
                                            {
                                                "action": {
                                                    "type": "text",
                                                    "payload": {
                                                        "template": "menu"
                                                    },
                                                    "label": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                                                },
                                                "color": "primary"
                                            }
                                        ]
                                    ]
                                }

                                if chat_counter == 5:
                                    # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç..."
                                    arguments = {
                                        "peer_id": peer_id,
                                        "type": "typing"
                                    }
                                    vk_session.method(
                                        'messages.setActivity', arguments)

                                    time.sleep(1)
                                    send_message(peer_id, message="–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, —Ç–æ –ø–µ—Ä–µ–π–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É ¬´–ß–∞—Ç-–±–æ—Ç¬ª.\n–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –Ω–∞ —É—á–µ–±–Ω—ã–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–º—ã.\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–µ —Ç–æ–ª—å–∫–æ, —Ç–æ –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª.\n\n–¢–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!", keyboard=kb_faq)
                                    chat_counter = 1
                                else:
                                    chat_counter += 1
                            else:
                                # –∑–¥–µ—Å—å –º—ã –ª–æ–≤–∏–º —Å–∏—Ç—É–∞—Ü–∏—é –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ—ë –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π-–≤–æ–ø—Ä–æ—Å–æ–º
                                is_problem = False

                try:
                    payload = JSON.JSONDecoder().decode(object_0["payload"])
                    if payload["function"] == "update":

                        # –ª–æ–≤–∏–º –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
                        try:
                            templates = faq_table.render_templates()
                            send_message(peer_id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!!!")
                            is_update = False
                        except JSON.decoder.JSONDecodeError:
                            send_message(
                                peer_id, "–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!\n–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–µ—à–∏—Ç –¥–∞–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É.")
                            message = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ç—å :)\n\n" + \
                                str(traceback.format_exc())
                            send_message(peer_id='368424892', message=message)

                    if payload["function"] == "help":
                        send_message(
                            peer_id, f"{faq_table.__str__()}", main_kb_faq)

                    if payload["function"] == "plug_on":
                        is_plug = True
                        send_message(peer_id, "–ó–∞–≥–ª—É—à–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞!")

                    if payload["function"] == "plug_off":
                        is_plug = False
                        send_message(peer_id, "–ó–∞–≥–ª—É—à–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")

                    if payload["function"] == "chat_on":
                        is_chat = True
                        send_message(peer_id, "–†–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á—ë–Ω!")

                    if payload["function"] == "chat_off":
                        is_chat = False
                        send_message(
                            peer_id, "–†–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω!")

                except KeyError:
                    pass

                try:
                    payload = JSON.JSONDecoder().decode(object_0["payload"])
                    try:
                        # –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å —à–∞–±–ª–æ–Ω
                        t_name = payload["template"]
                        if t_name in templates.keys():
                            if t_name == 'support_0':
                                # —Ç—É—Ç –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

                                # 1. –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ
                                template = templates['support_0']
                                send_message(peer_id, **template)
                            elif t_name == 'support_1':
                                is_problem = True
                                template = templates['support_1']
                                send_message(peer_id, **template)
                            else:
                                template = templates[t_name]
                                send_message(peer_id, **template)
                        elif t_name == 'chatbot_status':
                            # –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–±–æ—Ç–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
                            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–±–æ—Ç–Ω–æ—Å—Ç–∏
                            send_message(
                                peer_id, "–†–µ–∂–∏–º —á–∞—Ç-–±–æ—Ç–∞", chat_kb)
                    except KeyError:
                        # –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç
                        answer = payload["text"]
                        send_message(peer_id, answer)
                except KeyError:
                    pass

            elif keyboard_work == 0:
                message = "–ù–∞ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ VK –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –º–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–æ—Ç–æ–≤.\n–í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º."
                send_message(peer_id, message=message)

    except:  # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É

        # –¢–∞–∫–∂–µ –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–µ–¥–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
        if is_plug:
            send_message(
                peer_id, "–°–µ–π—á–∞—Å –≤–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")

        message = "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ç—å :)\n\n" + \
            str(traceback.format_exc())
        send_message(peer_id='368424892', message=message)

    return 'ok'
